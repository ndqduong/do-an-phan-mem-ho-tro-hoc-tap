import sys
import sqlite3
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,
    QPushButton, QDateEdit, QTimeEdit, QTableWidget, QTableWidgetItem,
    QMessageBox, QHeaderView, QSizePolicy
)
from PyQt5.QtCore import Qt, QDate, QTime, QTimer

DB_PATH = 'reminders.db'

class ReminderWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Nh·∫Øc Nh·ªü H·ªçc T·∫≠p")
        self.resize(600, 400)
        self._init_db()
        self._init_ui()
        self._load_reminders()
        # Timer ki·ªÉm tra nh·∫Øc m·ªói ph√∫t
        self.timer = QTimer(self)
        self.timer.timeout.connect(self._check_reminders)
        self.timer.start(60 * 1000)  # 60 gi√¢y

    def _init_db(self):
        # T·∫°o table n·∫øu ch∆∞a c√≥
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                message TEXT NOT NULL,
                date TEXT NOT NULL,
                time TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

    def _init_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)

        # --- Panel nh·∫≠p li·ªáu ---
        form_layout = QHBoxLayout()
        form_layout.setSpacing(8)

        # Nh·∫≠p n·ªôi dung nh·∫Øc nh·ªü
        lbl_msg = QLabel("N·ªôi dung:")
        lbl_msg.setFixedWidth(60)
        self.edit_msg = QLineEdit()
        self.edit_msg.setPlaceholderText("Nh·∫≠p n·ªôi dung c·∫ßn nh·∫Øc...")
        self.edit_msg.setMinimumWidth(200)

        # Ch·ªçn ng√†y, gi·ªù
        lbl_date = QLabel("Ng√†y:")
        self.date_edit = QDateEdit()
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setDate(QDate.currentDate())

        lbl_time = QLabel("Gi·ªù:")
        self.time_edit = QTimeEdit()
        self.time_edit.setTime(QTime.currentTime())
        self.time_edit.setDisplayFormat("HH:mm")

        # N√∫t Th√™m
        btn_add = QPushButton("Th√™m")
        btn_add.clicked.connect(self._add_reminder)

        form_layout.addWidget(lbl_msg)
        form_layout.addWidget(self.edit_msg)
        form_layout.addWidget(lbl_date)
        form_layout.addWidget(self.date_edit)
        form_layout.addWidget(lbl_time)
        form_layout.addWidget(self.time_edit)
        form_layout.addWidget(btn_add)

        main_layout.addLayout(form_layout)

        # --- B·∫£ng hi·ªÉn th·ªã nh·∫Øc nh·ªü ---
        self.table = QTableWidget(0, 4)
        self.table.setHorizontalHeaderLabels(["ID", "N·ªôi dung", "Ng√†y", "Gi·ªù"])
        self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)
        self.table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeToContents)
        self.table.setSelectionBehavior(self.table.SelectRows)
        self.table.setEditTriggers(self.table.NoEditTriggers)
        self.table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        main_layout.addWidget(self.table)

        # --- N√∫t X√≥a ---
        btn_layout = QHBoxLayout()
        btn_layout.addStretch()
        btn_delete = QPushButton("X√≥a nh·∫Øc")
        btn_delete.clicked.connect(self._delete_selected)
        btn_layout.addWidget(btn_delete)
        main_layout.addLayout(btn_layout)

    def _load_reminders(self):
        """T·∫£i to√†n b·ªô reminder t·ª´ DB v√† hi·ªÉn th·ªã v√†o table."""
        self.table.setRowCount(0)
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT id, message, date, time FROM reminders ORDER BY date, time")
        rows = c.fetchall()
        conn.close()

        for row in rows:
            self._append_row_to_table(row)

    def _append_row_to_table(self, row):
        """Th√™m 1 h√†ng row = (id, message, date, time) v√†o QTableWidget."""
        row_idx = self.table.rowCount()
        self.table.insertRow(row_idx)
        for col, value in enumerate(row):
            item = QTableWidgetItem(str(value))
            if col == 0:
                # ·∫®n c·ªôt ID sau khi load
                item.setTextAlignment(Qt.AlignCenter)
            elif col in (2, 3):
                item.setTextAlignment(Qt.AlignCenter)
            self.table.setItem(row_idx, col, item)

    def _add_reminder(self):
        """Th√™m reminder m·ªõi v√†o DB v√† table."""
        msg = self.edit_msg.text().strip()
        date = self.date_edit.date().toString("yyyy-MM-dd")
        time = self.time_edit.time().toString("HH:mm")

        if not msg:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p n·ªôi dung nh·∫Øc nh·ªü.")
            return

        # L∆∞u v√†o DB
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT INTO reminders(message,date,time) VALUES (?,?,?)", (msg, date, time))
        conn.commit()
        new_id = c.lastrowid
        conn.close()

        # Th√™m v√†o table ngay l·∫≠p t·ª©c
        self._append_row_to_table((new_id, msg, date, time))

        # Clear √¥ nh·∫≠p
        self.edit_msg.clear()
        self.date_edit.setDate(QDate.currentDate())
        self.time_edit.setTime(QTime.currentTime())

    def _delete_selected(self):
        """X√≥a c√°c d√≤ng ƒëang ƒë∆∞·ª£c ch·ªçn trong table v√† DB."""
        selected = self.table.selectionModel().selectedRows()
        if not selected:
            return
        # X√°c nh·∫≠n x√≥a
        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh·∫Øc nh·ªü ƒë√£ ch·ªçn?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )
        if reply != QMessageBox.Yes:
            return

        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        # X√≥a m·ªói h√†ng
        for idx in sorted(selected, key=lambda x: x.row(), reverse=True):
            row = idx.row()
            id_item = self.table.item(row, 0)
            if id_item:
                rid = int(id_item.text())
                c.execute("DELETE FROM reminders WHERE id=?", (rid,))
            self.table.removeRow(row)
        conn.commit()
        conn.close()

    def _check_reminders(self):
        """H√†m ƒë∆∞·ª£c g·ªçi m·ªói ph√∫t ƒë·ªÉ ki·ªÉm tra nh·∫Øc nh·ªü ƒë·∫øn gi·ªù."""
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT id, message FROM reminders WHERE date || ' ' || time = ?", (now,))
        matches = c.fetchall()
        conn.close()

        for rid, msg in matches:
            # Hi·ªán th√¥ng b√°o nh·∫Øc
            QMessageBox.information(self, "Nh·∫Øc nh·ªü", f"üîî {msg}")
            # Sau khi ƒë√£ nh·∫Øc, x√≥a kh·ªèi DB v√† table
            self._remove_reminder(rid)

    def _remove_reminder(self, rid):
        """X√≥a reminder c√≥ id=rid kh·ªèi DB v√† table, d√πng khi ƒë√£ nh·∫Øc."""
        # X√≥a kh·ªèi DB
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("DELETE FROM reminders WHERE id=?", (rid,))
        conn.commit()
        conn.close()
        # X√≥a kh·ªèi table
        for row in range(self.table.rowCount()):
            id_item = self.table.item(row, 0)
            if id_item and int(id_item.text()) == rid:
                self.table.removeRow(row)
                break

if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = ReminderWindow()
    win.show()
    sys.exit(app.exec_())
